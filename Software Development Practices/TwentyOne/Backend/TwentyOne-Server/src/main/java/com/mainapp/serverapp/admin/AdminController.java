package com.mainapp.serverapp.admin;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.mainapp.serverapp.lobbies.Status;
import com.mainapp.serverapp.player.PasswordHashes;
import com.mainapp.serverapp.player.PlayerController;
import com.mainapp.serverapp.admin.AdminRepository;
import com.mainapp.serverapp.player.Users;

@RestController // This means that this class is a Controller
@RequestMapping(path = "/admin") // This means URL's start with /demo (after Application path)
public class AdminController {
	@Autowired // This means to get the bean called adminRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private AdminRepository adminRepository;

	@RequestMapping(method = RequestMethod.POST, value = "/add") // Map ONLY POST Requests
	public @ResponseBody String addNewAdmin(@RequestBody Admin admin) {

		// @ResponseBody // means the returned String is the response, not a view name
		// @RequestParam // means it is a parameter from the GET or POST request

		adminRepository.save(admin);

		return new Status("Saved").toString();
	}

	@GetMapping(path = "/find/all")
	public @ResponseBody Iterable<Admin> getAllUsers() {
		// This returns a JSON or XML with the users

		return adminRepository.findAll();
	}

	@GetMapping("/find/{username}")
	public @ResponseBody Admin findByUsername(@PathVariable String username) {
		return adminRepository.findByUsername(username);
	}

	@GetMapping("/find/{username}/{password}")
	public @ResponseBody String login(@PathVariable String username, @PathVariable String password) {
		Admin attempt = findByUsername(username);

		// Creates a Password hash instance to use
		PasswordHashes pswd = new PasswordHashes();

		if (attempt == null) {
			return "User not Found";
		}

		if (pswd.passCheck(password, attempt.getPassword())) {
			return "Login Success";
		} else {
			return "Incorrect Password";
		}
	}

	@GetMapping(path = "/test")
	public @ResponseBody String testing() {
		return "working";
	}

	@RequestMapping(path = "/error")
	public @ResponseBody String error() {
		return "Information Not Found";
	}
}
